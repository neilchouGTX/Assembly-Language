Microsoft (R) Macro Assembler Version 14.27.29111.0	    12/15/20 11:10:24
Source.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				.586
				.model flat, stdcall
Source.asm(5) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto, dwExitCode:dword

				postiveOrNeg MACRO SDWORD				;define a macro to know whether call writeInt or writeDec to print
					push EAX
					cmp EAX,0
					jg goDec
					call WriteInt
					jmp finish
					goDec:
						call WriteDec
					finish:
					pop EAX
				ENDM

				LovepostiveOrNeg MACRO SDWORD			;Compiler told me the same Macro have redefined labels so i create another one
					push EAX
					cmp EAX,0
					jg LoveDec
					call WriteInt
					jmp Lovefinish
					LoveDec:
						call WriteDec
					Lovefinish:
					pop EAX
				ENDM


 00000000			.data
 00000000  000000C8 [		evenn SDWORD 200 DUP (?)
	    00000000
	   ]
 00000320  000000C8 [		oddd SDWORD 200 DUP (?)
	    00000000
	   ]
 00000640 00000000		countEven DWORD 0
 00000644 00000000		countOdd DWORD 0
 00000648 00000000		sumEven SDWORD 0
 0000064C 00000000		sumOdd SDWORD 0
 00000650			avgEven real8 ?
	   0000000000000000
 00000658			avgOdd real8 ?
	   0000000000000000

 00000000			.code
 00000000			main PROC
 00000000  BE 00000000			mov ESI,0
 00000005  BD 00000000			mov EBP,0
 0000000A				input:
 0000000A  E8 00000000 E			call readInt
 0000000F  83 F8 00				cmp EAX,0						;if eax = 0 the input stop
 00000012  74 29				je fin
 00000014  A9 00000001				test EAX, 1						;compare EAX is odd or even
 00000019  74 11				jz evenGo						;zero flag = 1 means is even
						
 0000001B				oddGo:
 0000001B  89 85 00000320 R			mov [oddd + EBP], EAX
 00000021  83 C5 04				add EBP,4
 00000024  FF 05 00000644 R			inc countOdd
 0000002A  EB DE				jmp input
 0000002C				evenGo:
 0000002C  89 86 00000000 R			mov [evenn + ESI], EAX
 00000032  83 C6 04				add ESI,4
 00000035  FF 05 00000640 R			inc countEven
 0000003B  EB CD				jmp input
 0000003D				fin:
 0000003D  E8 0000001B				call N1									;call lots of procedures
 00000042  E8 0000005B				call N2
 00000047  E8 0000009B				call N3
 0000004C  E8 00000129				call N4
 00000051  E8 0000019E				call N5
						INVOKE ExitProcess, 0
 0000005D			main endp

 0000005D			N1 PROC	
 0000005D  A1 00000644 R		mov EAX, countOdd						;print the number of Odd and print them out
 00000062  E8 00000000 E		call writeDec
 00000067  BE 00000000			mov ESI,0
 0000006C  8B 0D 00000644 R		mov ECX, countOdd
 00000072				OddLoop:
						mWriteSpace 1						;print space
 00000660		     1	.data
 00000660  00000001 [	     1	??0000 BYTE 1 DUP(' '),0
	    20
	   ] 00
 00000072		     1	.code
 00000072  52		     1		push	edx
 00000073  BA 00000660 R     1		mov	edx,OFFSET ??0000
 00000078  E8 00000000 E     1		call	WriteString
 0000007D  5A		     1		pop	edx
 0000007E  8B 86 00000320 R			mov EAX, [oddd + ESI]
 00000084  83 C6 04				add ESI,4
						postiveOrNeg EAX
 00000087  50		     1		push EAX
 00000088  83 F8 00	     1		cmp EAX,0
 0000008B  7F 07	     1		jg goDec
 0000008D  E8 00000000 E     1		call WriteInt
 00000092  EB 05	     1		jmp finish
 00000094		     1		goDec:
 00000094  E8 00000000 E     1			call WriteDec
 00000099		     1		finish:
 00000099  58		     1		pop EAX
						
 0000009A  E2 D6				loop OddLoop
 0000009C  E8 00000000 E		call crlf
 000000A1  C3				ret
 000000A2			N1 ENDP

 000000A2			N2 PROC										;print the number of Even and print them out
 000000A2  A1 00000640 R		mov EAX, countEven
 000000A7  E8 00000000 E		call writeDec
 000000AC  BE 00000000			mov ESI,0
 000000B1  8B 0D 00000640 R		mov ECX, countEven
 000000B7				EvenLoop:
						mWriteSpace 1						;print space
 00000662		     1	.data
 00000662  00000001 [	     1	??0001 BYTE 1 DUP(' '),0
	    20
	   ] 00
 000000B7		     1	.code
 000000B7  52		     1		push	edx
 000000B8  BA 00000662 R     1		mov	edx,OFFSET ??0001
 000000BD  E8 00000000 E     1		call	WriteString
 000000C2  5A		     1		pop	edx
 000000C3  8B 86 00000000 R			mov EAX, [evenn + ESI]
 000000C9  83 C6 04				add ESI,4
						postiveOrNeg EAX
 000000CC  50		     1		push EAX
 000000CD  83 F8 00	     1		cmp EAX,0
 000000D0  7F 07	     1		jg goDec
 000000D2  E8 00000000 E     1		call WriteInt
 000000D7  EB 05	     1		jmp finish
 000000D9		     1		goDec:
 000000D9  E8 00000000 E     1			call WriteDec
 000000DE		     1		finish:
 000000DE  58		     1		pop EAX
						
 000000DF  E2 D6				loop EvenLoop
 000000E1  E8 00000000 E		call crlf
 000000E6  C3				ret
 000000E7			N2 ENDP

 000000E7			N3 PROC										;find the odd max and even min
					LOCAL max:SDWORD, min:SDWORD
 000000ED  BE 00000000			mov ESI,0
 000000F2  8B 86 00000320 R		mov EAX,[oddd + ESI]
 000000F8  89 45 FC			mov max, EAX
 000000FB  8B 0D 00000644 R		mov ECX,countOdd
 00000101				findMax:
 00000101  8B 86 00000320 R			mov EAX,[oddd + ESI]
 00000107  39 45 FC				cmp max, EAX
 0000010A  7F 03				jg continue
 0000010C  89 45 FC				mov max, EAX
 0000010F					continue:
 0000010F  83 C6 04					add ESI,4
 00000112  E2 ED					loop findMax
 00000114  8B 45 FC			mov EAX, max
					postiveOrNeg EAX
 00000117  50		     1		push EAX
 00000118  83 F8 00	     1		cmp EAX,0
 0000011B  7F 07	     1		jg goDec
 0000011D  E8 00000000 E     1		call WriteInt
 00000122  EB 05	     1		jmp finish
 00000124		     1		goDec:
 00000124  E8 00000000 E     1			call WriteDec
 00000129		     1		finish:
 00000129  58		     1		pop EAX
					mWriteSpace 1
 00000664		     1	.data
 00000664  00000001 [	     1	??0002 BYTE 1 DUP(' '),0
	    20
	   ] 00
 0000012A		     1	.code
 0000012A  52		     1		push	edx
 0000012B  BA 00000664 R     1		mov	edx,OFFSET ??0002
 00000130  E8 00000000 E     1		call	WriteString
 00000135  5A		     1		pop	edx

 00000136  BE 00000000			mov ESI,0
 0000013B  8B 86 00000000 R		mov EAX,[evenn + ESI]
 00000141  89 45 F8			mov min, EAX
 00000144  8B 0D 00000640 R		mov ECX, countEven
 0000014A				findMin:
 0000014A  8B 86 00000000 R			mov EAX, [evenn + ESI]
 00000150  39 45 F8				cmp min, EAX
 00000153  7C 03				jl con
 00000155  89 45 F8				mov min, EAX
 00000158					con:
 00000158  83 C6 04					add ESI,4
 0000015B  E2 ED					loop findMin
 0000015D  8B 45 F8			mov EAX,min
					LovepostiveOrNeg EAX
 00000160  50		     1		push EAX
 00000161  83 F8 00	     1		cmp EAX,0
 00000164  7F 07	     1		jg LoveDec
 00000166  E8 00000000 E     1		call WriteInt
 0000016B  EB 05	     1		jmp Lovefinish
 0000016D		     1		LoveDec:
 0000016D  E8 00000000 E     1			call WriteDec
 00000172		     1		Lovefinish:
 00000172  58		     1		pop EAX
 00000173  E8 00000000 E		call crlf
					ret
 0000017A			N3 ENDP

 0000017A			N4 PROC										;print odd and even's sum
 0000017A  BE 00000000			mov ESI, 0
 0000017F  8B 0D 00000644 R		mov ECX, countOdd
 00000185				totalOdd:
 00000185  8B 86 00000320 R			mov EAX, [oddd + ESI]
 0000018B  01 05 0000064C R			add sumOdd, EAX
 00000191  83 C6 04				add ESI,4
 00000194  E2 EF				loop totalOdd

 00000196  BE 00000000			mov ESI, 0
 0000019B  8B 0D 00000640 R		mov ECX, countEven
 000001A1				totalEven:
 000001A1  8B 86 00000000 R			mov EAX, [evenn + ESI]
 000001A7  01 05 00000648 R			add sumEven, EAX
 000001AD  83 C6 04				add ESI,4
 000001B0  E2 EF				loop totalEven
 000001B2  A1 0000064C R		mov EAX,SumOdd
					postiveOrNeg EAX
 000001B7  50		     1		push EAX
 000001B8  83 F8 00	     1		cmp EAX,0
 000001BB  7F 07	     1		jg goDec
 000001BD  E8 00000000 E     1		call WriteInt
 000001C2  EB 05	     1		jmp finish
 000001C4		     1		goDec:
 000001C4  E8 00000000 E     1			call WriteDec
 000001C9		     1		finish:
 000001C9  58		     1		pop EAX
					mWriteSpace 1
 00000666		     1	.data
 00000666  00000001 [	     1	??0003 BYTE 1 DUP(' '),0
	    20
	   ] 00
 000001CA		     1	.code
 000001CA  52		     1		push	edx
 000001CB  BA 00000666 R     1		mov	edx,OFFSET ??0003
 000001D0  E8 00000000 E     1		call	WriteString
 000001D5  5A		     1		pop	edx
 000001D6  A1 00000648 R		mov EAX,SumEven
					LovepostiveOrNeg EAX
 000001DB  50		     1		push EAX
 000001DC  83 F8 00	     1		cmp EAX,0
 000001DF  7F 07	     1		jg LoveDec
 000001E1  E8 00000000 E     1		call WriteInt
 000001E6  EB 05	     1		jmp Lovefinish
 000001E8		     1		LoveDec:
 000001E8  E8 00000000 E     1			call WriteDec
 000001ED		     1		Lovefinish:
 000001ED  58		     1		pop EAX
 000001EE  E8 00000000 E		call crlf
 000001F3  C3				ret
 000001F4			N4 ENDP

 000001F4			N5 PROC										;print the average of both
 000001F4  9B DB E3			finit
 000001F7  DB 05 0000064C R		fild SumOdd
 000001FD  DB 05 00000644 R		fild countOdd
 00000203  DE F9			fdivp
 00000205  DD 1D 00000658 R		fstp avgOdd

 0000020B  DB 05 00000648 R		fild SumEven
 00000211  DB 05 00000640 R		fild countEven
 00000217  DE F9			fdivp
 00000219  DD 1D 00000650 R		fstp avgEven


 0000021F  DD 05 00000658 R		fld avgOdd
 00000225  E8 00000000 E		call writeFloat
					
					mWriteSpace 1
 00000668		     1	.data
 00000668  00000001 [	     1	??0004 BYTE 1 DUP(' '),0
	    20
	   ] 00
 0000022A		     1	.code
 0000022A  52		     1		push	edx
 0000022B  BA 00000668 R     1		mov	edx,OFFSET ??0004
 00000230  E8 00000000 E     1		call	WriteString
 00000235  5A		     1		pop	edx

 00000236  DD 05 00000650 R		fld avgEven
 0000023C  E8 00000000 E		call writeFloat

 00000241  C3				ret
 00000242			N5 ENDP

				END main
Microsoft (R) Macro Assembler Version 14.27.29111.0	    12/15/20 11:10:24
Source.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
LovepostiveOrNeg . . . . . . . .	Proc
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc
postiveOrNeg . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000066A Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000242 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
N1 . . . . . . . . . . . . . . .	P Near	 0000005D _TEXT	Length= 00000045 Public STDCALL
  OddLoop  . . . . . . . . . . .	L Near	 00000072 _TEXT	
  goDec  . . . . . . . . . . . .	L Near	 00000094 _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000099 _TEXT	
N2 . . . . . . . . . . . . . . .	P Near	 000000A2 _TEXT	Length= 00000045 Public STDCALL
  EvenLoop . . . . . . . . . . .	L Near	 000000B7 _TEXT	
  goDec  . . . . . . . . . . . .	L Near	 000000D9 _TEXT	
  finish . . . . . . . . . . . .	L Near	 000000DE _TEXT	
N3 . . . . . . . . . . . . . . .	P Near	 000000E7 _TEXT	Length= 00000093 Public STDCALL
  max  . . . . . . . . . . . . .	DWord	 bp - 00000004
  min  . . . . . . . . . . . . .	DWord	 bp - 00000008
  findMax  . . . . . . . . . . .	L Near	 00000101 _TEXT	
  continue . . . . . . . . . . .	L Near	 0000010F _TEXT	
  goDec  . . . . . . . . . . . .	L Near	 00000124 _TEXT	
  finish . . . . . . . . . . . .	L Near	 00000129 _TEXT	
  findMin  . . . . . . . . . . .	L Near	 0000014A _TEXT	
  con  . . . . . . . . . . . . .	L Near	 00000158 _TEXT	
  LoveDec  . . . . . . . . . . .	L Near	 0000016D _TEXT	
  Lovefinish . . . . . . . . . .	L Near	 00000172 _TEXT	
N4 . . . . . . . . . . . . . . .	P Near	 0000017A _TEXT	Length= 0000007A Public STDCALL
  totalOdd . . . . . . . . . . .	L Near	 00000185 _TEXT	
  totalEven  . . . . . . . . . .	L Near	 000001A1 _TEXT	
  goDec  . . . . . . . . . . . .	L Near	 000001C4 _TEXT	
  finish . . . . . . . . . . . .	L Near	 000001C9 _TEXT	
  LoveDec  . . . . . . . . . . .	L Near	 000001E8 _TEXT	
  Lovefinish . . . . . . . . . .	L Near	 000001ED _TEXT	
N5 . . . . . . . . . . . . . . .	P Near	 000001F4 _TEXT	Length= 0000004E Public STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000005D Public STDCALL
  input  . . . . . . . . . . . .	L Near	 0000000A _TEXT	
  oddGo  . . . . . . . . . . . .	L Near	 0000001B _TEXT	
  evenGo . . . . . . . . . . . .	L Near	 0000002C _TEXT	
  fin  . . . . . . . . . . . . .	L Near	 0000003D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00000660 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000662 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00000664 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00000666 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000668 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgEven  . . . . . . . . . . . .	QWord	 00000650 _DATA	
avgOdd . . . . . . . . . . . . .	QWord	 00000658 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countEven  . . . . . . . . . . .	DWord	 00000640 _DATA	
countOdd . . . . . . . . . . . .	DWord	 00000644 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
evenn  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
oddd . . . . . . . . . . . . . .	DWord	 00000320 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumEven  . . . . . . . . . . . .	DWord	 00000648 _DATA	
sumOdd . . . . . . . . . . . . .	DWord	 0000064C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
